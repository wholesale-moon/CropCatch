//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Input/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""23ad7c43-734f-4ae3-92ea-39c771beb8a2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""87e07253-c58c-4360-a6dd-c4dba5413dba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b4e27f1b-c4d2-45be-9c64-4d5625d19f77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7a68d0b8-3c43-45d6-a299-6929e705341d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""45c733cc-a5ed-4e7d-a7ac-2c78b5c1146e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bd642f09-c502-4a16-a16b-5439d031eebb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b60c4d7b-52b4-41be-a412-38a8487d1e38"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c3ec7f4a-d030-4b67-aeb2-2b5b1d600830"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7cf5cd6a-2e46-4745-b011-d91cf4efb970"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ad5e4009-571d-4a94-9d62-9c06813fc752"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e718fc43-dafb-463d-9b55-1ec35d46b011"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd2b6342-eb28-4593-b348-e6dea0864e5a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""def5fa72-ce7c-4984-8686-34a36f366186"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""6baf17c1-baf1-4580-8b1d-1061e5b99c22"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""d83613fb-2f56-421e-8491-ffea7a589366"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""1b91c1f0-a567-499a-8fe5-76e70ef5ad6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""12b05e29-fc00-4fa4-b626-6290f5c9309c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""56dbb954-b35a-443d-b232-32b9ec31ff92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""fa86a62e-67d2-4619-b128-4cf53bbad52e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""dcddab47-7e4d-41ff-b9a5-af46de0e2e76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54e2367e-2994-4e27-a8e8-b8dfdfe0668c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d1d37fa-2e2c-440a-9375-f09c4ee147d8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a7c6b54-914b-4dc9-b41b-05f6927fc47b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb594c84-f064-4eb1-a100-ba83297eff7b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d938cfa-15f2-47f9-b095-c357a2bc363b"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""8ddc1170-f9a2-49a5-bac4-ac3e3c835d3a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8421406f-b589-4925-9eec-6f59a59af393"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0843372c-8db5-432c-a072-5e58fbd5a182"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f5b7caca-dc00-48f9-8c8c-23fcb844f105"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""31d1ab00-8779-4993-ab9d-fa9ed04629b7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Fishing"",
            ""id"": ""45501628-462c-426a-b65f-82c580d4a3dd"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""caac75a8-1a2d-48a7-9bf8-882fc658d3cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""becaed23-5f70-4bbd-a535-dac974f36d1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""0d792e18-595f-4258-bff0-b7a7666590d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""3f8f612f-d8ac-4532-9726-9ade092c5256"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""739f82e3-f501-419b-8469-e1ceb14bada1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""fdef8a01-bd25-4cfa-bccf-6cf5fe07d848"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""11719134-96cc-4e83-b870-4fd2fdfcd1fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a8c5eeb-9fe8-41f1-8f7e-4cdc9372e182"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb30aa0a-43e8-4c0e-8f42-638fa3b5e174"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e775bec-0211-42c5-b931-5c06a13336ef"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cac99cca-70ff-4209-a90c-feb9f42bc2e8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47ad5993-8c8a-4cb2-b06b-34cb58592969"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04d92a13-ebc8-4bd1-89ff-c0a5005c1014"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2673c1f9-242f-479e-acaf-13a8dada3fc8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheatcodes"",
            ""id"": ""587be48d-8ee5-44e3-bff5-62faf9116045"",
            ""actions"": [
                {
                    ""name"": ""LoadLevel1"",
                    ""type"": ""Button"",
                    ""id"": ""f97dda19-ee4c-4ab9-a8b6-ee92295d0307"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadLevel2"",
                    ""type"": ""Button"",
                    ""id"": ""4ae9e971-1e20-408b-9976-cd21061b1457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadLevel3"",
                    ""type"": ""Button"",
                    ""id"": ""531dfec1-6022-426f-ada5-48263dc7a270"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GainMoney"",
                    ""type"": ""Button"",
                    ""id"": ""8664ba49-3d18-4e2e-83c8-51ae22c9ceed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoseMoney"",
                    ""type"": ""Button"",
                    ""id"": ""60edd460-eb05-4a1a-95cb-58bc6ed7fa20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CompleteFishing"",
                    ""type"": ""Button"",
                    ""id"": ""58091684-ec3b-45b0-b222-71ced3c0a8f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuyTicket"",
                    ""type"": ""Button"",
                    ""id"": ""c44f3f77-7177-42fd-991b-3f7484ed97d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SellAllFish"",
                    ""type"": ""Button"",
                    ""id"": ""f0f7f0d8-5f36-40f6-9f8e-a1eeee378882"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Ctrl+1"",
                    ""id"": ""e15df356-1d7a-466f-950a-4e008b88ad03"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""9900188f-8c3d-4911-bd59-5271ee0e6025"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""6ab1ceab-ac41-4002-b903-a3c54b86529c"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Ctrl+2"",
                    ""id"": ""195fc4e1-85e8-48ae-8696-4e3e8b8f5953"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""0833ce00-0ed1-402c-b17e-72591bd95fb8"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""a8818611-e1a4-4005-b73f-054070c44225"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Ctrl+3"",
                    ""id"": ""20275a0d-5153-40ef-9c13-2dddab7d685c"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel3"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""6a371cd5-5888-4e0d-aa85-3f44c78d01d5"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""bded77d8-48fd-49a2-a7f4-af3e306a2c13"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadLevel3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43ca6b7f-89d1-4708-bb18-f994a90e755f"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GainMoney"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""811dc347-1952-401d-8d30-5994acbd1ab8"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoseMoney"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a8d146a-b360-4fbb-a7bd-a2f710338942"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CompleteFishing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""250fedaf-370f-43f9-b6c5-5d2a77e86621"",
                    ""path"": ""<Keyboard>/numpadPeriod"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuyTicket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9b10aa4-b489-40f9-aff9-4f0897125e59"",
                    ""path"": ""<Keyboard>/numpad9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SellAllFish"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_Inventory = m_Player.FindAction("Inventory", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_Interact = m_UI.FindAction("Interact", throwIfNotFound: true);
        m_UI_Previous = m_UI.FindAction("Previous", throwIfNotFound: true);
        m_UI_Next = m_UI.FindAction("Next", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
        m_UI_Inventory = m_UI.FindAction("Inventory", throwIfNotFound: true);
        // Fishing
        m_Fishing = asset.FindActionMap("Fishing", throwIfNotFound: true);
        m_Fishing_Interact = m_Fishing.FindAction("Interact", throwIfNotFound: true);
        m_Fishing_RightClick = m_Fishing.FindAction("RightClick", throwIfNotFound: true);
        m_Fishing_W = m_Fishing.FindAction("W", throwIfNotFound: true);
        m_Fishing_A = m_Fishing.FindAction("A", throwIfNotFound: true);
        m_Fishing_S = m_Fishing.FindAction("S", throwIfNotFound: true);
        m_Fishing_D = m_Fishing.FindAction("D", throwIfNotFound: true);
        m_Fishing_Pause = m_Fishing.FindAction("Pause", throwIfNotFound: true);
        // Cheatcodes
        m_Cheatcodes = asset.FindActionMap("Cheatcodes", throwIfNotFound: true);
        m_Cheatcodes_LoadLevel1 = m_Cheatcodes.FindAction("LoadLevel1", throwIfNotFound: true);
        m_Cheatcodes_LoadLevel2 = m_Cheatcodes.FindAction("LoadLevel2", throwIfNotFound: true);
        m_Cheatcodes_LoadLevel3 = m_Cheatcodes.FindAction("LoadLevel3", throwIfNotFound: true);
        m_Cheatcodes_GainMoney = m_Cheatcodes.FindAction("GainMoney", throwIfNotFound: true);
        m_Cheatcodes_LoseMoney = m_Cheatcodes.FindAction("LoseMoney", throwIfNotFound: true);
        m_Cheatcodes_CompleteFishing = m_Cheatcodes.FindAction("CompleteFishing", throwIfNotFound: true);
        m_Cheatcodes_BuyTicket = m_Cheatcodes.FindAction("BuyTicket", throwIfNotFound: true);
        m_Cheatcodes_SellAllFish = m_Cheatcodes.FindAction("SellAllFish", throwIfNotFound: true);
    }

    ~@GameInputs()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, GameInputs.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, GameInputs.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Fishing.enabled, "This will cause a leak and performance issues, GameInputs.Fishing.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Cheatcodes.enabled, "This will cause a leak and performance issues, GameInputs.Cheatcodes.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_Inventory;
    public struct PlayerActions
    {
        private @GameInputs m_Wrapper;
        public PlayerActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @Inventory => m_Wrapper.m_Player_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_Interact;
    private readonly InputAction m_UI_Previous;
    private readonly InputAction m_UI_Next;
    private readonly InputAction m_UI_Pause;
    private readonly InputAction m_UI_Inventory;
    public struct UIActions
    {
        private @GameInputs m_Wrapper;
        public UIActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputAction @Interact => m_Wrapper.m_UI_Interact;
        public InputAction @Previous => m_Wrapper.m_UI_Previous;
        public InputAction @Next => m_Wrapper.m_UI_Next;
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputAction @Inventory => m_Wrapper.m_UI_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Previous.started += instance.OnPrevious;
            @Previous.performed += instance.OnPrevious;
            @Previous.canceled += instance.OnPrevious;
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Previous.started -= instance.OnPrevious;
            @Previous.performed -= instance.OnPrevious;
            @Previous.canceled -= instance.OnPrevious;
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Fishing
    private readonly InputActionMap m_Fishing;
    private List<IFishingActions> m_FishingActionsCallbackInterfaces = new List<IFishingActions>();
    private readonly InputAction m_Fishing_Interact;
    private readonly InputAction m_Fishing_RightClick;
    private readonly InputAction m_Fishing_W;
    private readonly InputAction m_Fishing_A;
    private readonly InputAction m_Fishing_S;
    private readonly InputAction m_Fishing_D;
    private readonly InputAction m_Fishing_Pause;
    public struct FishingActions
    {
        private @GameInputs m_Wrapper;
        public FishingActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Fishing_Interact;
        public InputAction @RightClick => m_Wrapper.m_Fishing_RightClick;
        public InputAction @W => m_Wrapper.m_Fishing_W;
        public InputAction @A => m_Wrapper.m_Fishing_A;
        public InputAction @S => m_Wrapper.m_Fishing_S;
        public InputAction @D => m_Wrapper.m_Fishing_D;
        public InputAction @Pause => m_Wrapper.m_Fishing_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Fishing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingActions set) { return set.Get(); }
        public void AddCallbacks(IFishingActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @W.started += instance.OnW;
            @W.performed += instance.OnW;
            @W.canceled += instance.OnW;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @S.started += instance.OnS;
            @S.performed += instance.OnS;
            @S.canceled += instance.OnS;
            @D.started += instance.OnD;
            @D.performed += instance.OnD;
            @D.canceled += instance.OnD;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IFishingActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @W.started -= instance.OnW;
            @W.performed -= instance.OnW;
            @W.canceled -= instance.OnW;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @S.started -= instance.OnS;
            @S.performed -= instance.OnS;
            @S.canceled -= instance.OnS;
            @D.started -= instance.OnD;
            @D.performed -= instance.OnD;
            @D.canceled -= instance.OnD;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IFishingActions instance)
        {
            if (m_Wrapper.m_FishingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingActions @Fishing => new FishingActions(this);

    // Cheatcodes
    private readonly InputActionMap m_Cheatcodes;
    private List<ICheatcodesActions> m_CheatcodesActionsCallbackInterfaces = new List<ICheatcodesActions>();
    private readonly InputAction m_Cheatcodes_LoadLevel1;
    private readonly InputAction m_Cheatcodes_LoadLevel2;
    private readonly InputAction m_Cheatcodes_LoadLevel3;
    private readonly InputAction m_Cheatcodes_GainMoney;
    private readonly InputAction m_Cheatcodes_LoseMoney;
    private readonly InputAction m_Cheatcodes_CompleteFishing;
    private readonly InputAction m_Cheatcodes_BuyTicket;
    private readonly InputAction m_Cheatcodes_SellAllFish;
    public struct CheatcodesActions
    {
        private @GameInputs m_Wrapper;
        public CheatcodesActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LoadLevel1 => m_Wrapper.m_Cheatcodes_LoadLevel1;
        public InputAction @LoadLevel2 => m_Wrapper.m_Cheatcodes_LoadLevel2;
        public InputAction @LoadLevel3 => m_Wrapper.m_Cheatcodes_LoadLevel3;
        public InputAction @GainMoney => m_Wrapper.m_Cheatcodes_GainMoney;
        public InputAction @LoseMoney => m_Wrapper.m_Cheatcodes_LoseMoney;
        public InputAction @CompleteFishing => m_Wrapper.m_Cheatcodes_CompleteFishing;
        public InputAction @BuyTicket => m_Wrapper.m_Cheatcodes_BuyTicket;
        public InputAction @SellAllFish => m_Wrapper.m_Cheatcodes_SellAllFish;
        public InputActionMap Get() { return m_Wrapper.m_Cheatcodes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatcodesActions set) { return set.Get(); }
        public void AddCallbacks(ICheatcodesActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatcodesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatcodesActionsCallbackInterfaces.Add(instance);
            @LoadLevel1.started += instance.OnLoadLevel1;
            @LoadLevel1.performed += instance.OnLoadLevel1;
            @LoadLevel1.canceled += instance.OnLoadLevel1;
            @LoadLevel2.started += instance.OnLoadLevel2;
            @LoadLevel2.performed += instance.OnLoadLevel2;
            @LoadLevel2.canceled += instance.OnLoadLevel2;
            @LoadLevel3.started += instance.OnLoadLevel3;
            @LoadLevel3.performed += instance.OnLoadLevel3;
            @LoadLevel3.canceled += instance.OnLoadLevel3;
            @GainMoney.started += instance.OnGainMoney;
            @GainMoney.performed += instance.OnGainMoney;
            @GainMoney.canceled += instance.OnGainMoney;
            @LoseMoney.started += instance.OnLoseMoney;
            @LoseMoney.performed += instance.OnLoseMoney;
            @LoseMoney.canceled += instance.OnLoseMoney;
            @CompleteFishing.started += instance.OnCompleteFishing;
            @CompleteFishing.performed += instance.OnCompleteFishing;
            @CompleteFishing.canceled += instance.OnCompleteFishing;
            @BuyTicket.started += instance.OnBuyTicket;
            @BuyTicket.performed += instance.OnBuyTicket;
            @BuyTicket.canceled += instance.OnBuyTicket;
            @SellAllFish.started += instance.OnSellAllFish;
            @SellAllFish.performed += instance.OnSellAllFish;
            @SellAllFish.canceled += instance.OnSellAllFish;
        }

        private void UnregisterCallbacks(ICheatcodesActions instance)
        {
            @LoadLevel1.started -= instance.OnLoadLevel1;
            @LoadLevel1.performed -= instance.OnLoadLevel1;
            @LoadLevel1.canceled -= instance.OnLoadLevel1;
            @LoadLevel2.started -= instance.OnLoadLevel2;
            @LoadLevel2.performed -= instance.OnLoadLevel2;
            @LoadLevel2.canceled -= instance.OnLoadLevel2;
            @LoadLevel3.started -= instance.OnLoadLevel3;
            @LoadLevel3.performed -= instance.OnLoadLevel3;
            @LoadLevel3.canceled -= instance.OnLoadLevel3;
            @GainMoney.started -= instance.OnGainMoney;
            @GainMoney.performed -= instance.OnGainMoney;
            @GainMoney.canceled -= instance.OnGainMoney;
            @LoseMoney.started -= instance.OnLoseMoney;
            @LoseMoney.performed -= instance.OnLoseMoney;
            @LoseMoney.canceled -= instance.OnLoseMoney;
            @CompleteFishing.started -= instance.OnCompleteFishing;
            @CompleteFishing.performed -= instance.OnCompleteFishing;
            @CompleteFishing.canceled -= instance.OnCompleteFishing;
            @BuyTicket.started -= instance.OnBuyTicket;
            @BuyTicket.performed -= instance.OnBuyTicket;
            @BuyTicket.canceled -= instance.OnBuyTicket;
            @SellAllFish.started -= instance.OnSellAllFish;
            @SellAllFish.performed -= instance.OnSellAllFish;
            @SellAllFish.canceled -= instance.OnSellAllFish;
        }

        public void RemoveCallbacks(ICheatcodesActions instance)
        {
            if (m_Wrapper.m_CheatcodesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheatcodesActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatcodesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatcodesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheatcodesActions @Cheatcodes => new CheatcodesActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
    }
    public interface IFishingActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnW(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ICheatcodesActions
    {
        void OnLoadLevel1(InputAction.CallbackContext context);
        void OnLoadLevel2(InputAction.CallbackContext context);
        void OnLoadLevel3(InputAction.CallbackContext context);
        void OnGainMoney(InputAction.CallbackContext context);
        void OnLoseMoney(InputAction.CallbackContext context);
        void OnCompleteFishing(InputAction.CallbackContext context);
        void OnBuyTicket(InputAction.CallbackContext context);
        void OnSellAllFish(InputAction.CallbackContext context);
    }
}
